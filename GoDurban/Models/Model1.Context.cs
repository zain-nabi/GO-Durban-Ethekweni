//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace GoDurban.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class GoDurbanEntities : DbContext
    {
        public GoDurbanEntities()
            : base("name=GoDurbanEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
        public override int SaveChanges()
        {
            var auditFactory = new AuditTrailFactory(this); // "this" is the current db context i.e. VideoLibraryContext

            var entityList = ChangeTracker.Entries().Where(p =>
            p.State == EntityState.Added ||                 //Audit where state is "Added"
            p.State == EntityState.Deleted ||               //Audit where state is "Deleted"
            p.State == EntityState.Modified ||              //Audit where state is "Modified"
            !(p.Entity is tbl_AuditTrail) ||                //Dont audit if the entity is "AuditTrail". This will cause a double entry/audit of AuditTrail entity
            p.Entity != null);                              //Dont audit if the entity is null

            entityList.ToList().ForEach(entity =>
            {
                tbl_AuditTrail audit = auditFactory.GetAudit(entity);//Generate a new AuditTrail entity model
                if (audit.Actions != null && audit.NewData != null)
                {
                    tbl_AuditTrail.Add(audit);              //Add the generated auditTrail entity to the DbSet context                    
                }
            });
            return base.SaveChanges();
        }
        public virtual DbSet<Account> Accounts { get; set; }
        public virtual DbSet<Association> Associations { get; set; }
        public virtual DbSet<Bank> Banks { get; set; }
        public virtual DbSet<Date> Dates { get; set; }
        public virtual DbSet<NoOfClicksPerMonth> NoOfClicksPerMonths { get; set; }
        public virtual DbSet<Payment> Payments { get; set; }
        public virtual DbSet<Region> Regions { get; set; }
        public virtual DbSet<tbl_AssociationLeadership> tbl_AssociationLeadership { get; set; }
        public virtual DbSet<tbl_AssociationRegion> tbl_AssociationRegion { get; set; }
        public virtual DbSet<tbl_AssociationServiceArea> tbl_AssociationServiceArea { get; set; }
        public virtual DbSet<tbl_AuditTrail> tbl_AuditTrail { get; set; }
        public virtual DbSet<tbl_Driver> tbl_Driver { get; set; }
        public virtual DbSet<tbl_Gender> tbl_Gender { get; set; }
        public virtual DbSet<tbl_LicenseCode> tbl_LicenseCode { get; set; }
        public virtual DbSet<tbl_OperatingLicense> tbl_OperatingLicense { get; set; }
        public virtual DbSet<tbl_Owner> tbl_Owner { get; set; }
        public virtual DbSet<tbl_OwnerAssociation> tbl_OwnerAssociation { get; set; }
        public virtual DbSet<tbl_OwnerServiceArea> tbl_OwnerServiceArea { get; set; }
        public virtual DbSet<tbl_Race> tbl_Race { get; set; }
        public virtual DbSet<tbl_Reason> tbl_Reason { get; set; }
        public virtual DbSet<tbl_RegionalLeadership> tbl_RegionalLeadership { get; set; }
        public virtual DbSet<tbl_RegionServiceArea> tbl_RegionServiceArea { get; set; }
        public virtual DbSet<tbl_Role> tbl_Role { get; set; }
        public virtual DbSet<tbl_ServiceArea> tbl_ServiceArea { get; set; }
        public virtual DbSet<tbl_Status> tbl_Status { get; set; }
        public virtual DbSet<tbl_User> tbl_User { get; set; }
        public virtual DbSet<tbl_UserPage> tbl_UserPage { get; set; }
        public virtual DbSet<tbl_Vehicle> tbl_Vehicle { get; set; }
        public virtual DbSet<tbl_VehicleInfo> tbl_VehicleInfo { get; set; }
        public virtual DbSet<datum> data { get; set; }
        public virtual DbSet<tbl_DriverCount> tbl_DriverCount { get; set; }
        public virtual DbSet<tbl_PaymentAmount> tbl_PaymentAmount { get; set; }
        public virtual DbSet<V_details> V_details { get; set; }
        public virtual DbSet<v_drivers> v_drivers { get; set; }
        public virtual DbSet<v_license> v_license { get; set; }
        public virtual DbSet<v_owner> v_owner { get; set; }
        public virtual DbSet<v_region> v_region { get; set; }
        public virtual DbSet<V_vehicle> V_vehicle { get; set; }
    
        public virtual int CheckVoid()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CheckVoid");
        }
    
        public virtual int sp_Batch(string seq_name, ObjectParameter case_desc)
        {
            var seq_nameParameter = seq_name != null ?
                new ObjectParameter("seq_name", seq_name) :
                new ObjectParameter("seq_name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Batch", seq_nameParameter, case_desc);
        }
    
        public virtual int sp_Count(string seq_name, ObjectParameter case_desc)
        {
            var seq_nameParameter = seq_name != null ?
                new ObjectParameter("seq_name", seq_name) :
                new ObjectParameter("seq_name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Count", seq_nameParameter, case_desc);
        }
    
        public virtual int sp_DOC_Count(string seq_name, ObjectParameter case_desc)
        {
            var seq_nameParameter = seq_name != null ?
                new ObjectParameter("seq_name", seq_name) :
                new ObjectParameter("seq_name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_DOC_Count", seq_nameParameter, case_desc);
        }
    
        public virtual int sp_DOC_LN(string seq_name, ObjectParameter case_desc)
        {
            var seq_nameParameter = seq_name != null ?
                new ObjectParameter("seq_name", seq_name) :
                new ObjectParameter("seq_name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_DOC_LN", seq_nameParameter, case_desc);
        }
    
        public virtual int sp_get(Nullable<int> id, ObjectParameter acountID)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_get", idParameter, acountID);
        }
    }
}
